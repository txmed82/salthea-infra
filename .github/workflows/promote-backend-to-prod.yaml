name: Promote Backend to Production Configuration

on:
  workflow_run:
    workflows: ["Build & Deploy to Staging Slot"] # Name of the salthea-backend workflow
    types:
      - completed
    branches:
      - main # Or your staging deployment branch for backend
  workflow_dispatch: # Keep manual trigger as an option
    inputs:
      run_id:
        description: '(Optional) Run ID of the salthea-backend workflow if not triggered by workflow_run.'
        required: false
        type: string
      backend_image_tag:
        description: '(Optional) Specific backend image tag to promote. Format: staging-commitsha'
        required: false
        type: string

jobs:
  promote-to-production:
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') # Run if dispatched or if triggering workflow was successful

    defaults:
      run:
        working-directory: . # Terraform files are at the root of the salthea-infra repo

    steps:
      - name: Checkout salthea-infra repository
        uses: actions/checkout@v4
        # No explicit repository, path, or token needed to checkout the current repository.
        # The default GITHUB_TOKEN will be used and is scoped correctly.

      - name: Azure login using credentials JSON
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        id: init
        run: terraform init

      - name: Determine Triggering Run ID
        id: get_run_id
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "TRIGGERING_RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_ENV
          elif [[ -n "${{ github.event.inputs.run_id }}" ]]; then
            echo "TRIGGERING_RUN_ID=${{ github.event.inputs.run_id }}" >> $GITHUB_ENV
          else
            # This case should ideally not be hit if backend_image_tag is also not provided for dispatch
            echo "No run_id available and no direct image tag provided for workflow_dispatch."
            # Consider exiting if backend_image_tag is also empty for workflow_dispatch
          fi

      - name: Download Backend Image Tag Artifact
        # Only download if we have a TRIGGERING_RUN_ID and no direct backend_image_tag input was given for dispatch
        if: (env.TRIGGERING_RUN_ID != '' && github.event.inputs.backend_image_tag == '') || (github.event_name == 'workflow_run' && github.event.inputs.backend_image_tag == '')
        uses: actions/download-artifact@v4.0.0
        with:
          name: backend-image-tag
          path: ./temp_artifact
          run-id: ${{ env.TRIGGERING_RUN_ID }}
          github-token: ${{ secrets.PAT_TOKEN }}
          repository: '{{ github.repository_owner }}/salthea-backend'

      - name: Read Image Tag from Artifact or Input
        id: get_tag
        run: |
          if [[ -n "${{ github.event.inputs.backend_image_tag }}" ]]; then
            echo "Using provided image tag for dispatch: ${{ github.event.inputs.backend_image_tag }}"
            echo "IMAGE_TAG=${{ github.event.inputs.backend_image_tag }}" >> $GITHUB_ENV
          elif [[ -f "./temp_artifact/image_tag.txt" ]]; then
            IMAGE_TAG_FROM_FILE=$(cat ./temp_artifact/image_tag.txt)
            echo "Using image tag from artifact: $IMAGE_TAG_FROM_FILE"
            echo "IMAGE_TAG=$IMAGE_TAG_FROM_FILE" >> $GITHUB_ENV
          else
            echo "Error: Image tag could not be determined. Artifact not found or no specific tag provided for dispatch."
            exit 1
          fi

      - name: Validate Image Tag (Basic Check)
        run: |
          if [[ -z "${{ env.IMAGE_TAG }}" ]] || [[ ! "${{ env.IMAGE_TAG }}" =~ ^staging-[a-f0-9]{7,}$ ]]; then
            echo "Error: Invalid or missing image tag: ${{ env.IMAGE_TAG }}. Expected format: staging-<commitsha of at least 7 chars>"
            # exit 1 # Enable for production
          fi

      - name: Apply Terraform to Update Production Slot Configuration
        run: |
          terraform apply -auto-approve \
            -var="backend_production_image_tag=${{ env.IMAGE_TAG }}"

      - name: Clean up downloaded artifact
        if: always() && steps.get_run_id.outputs.TRIGGERING_RUN_ID != '' && github.event.inputs.backend_image_tag == '' # Clean up if artifact was potentially downloaded
        run: rm -rf ./temp_artifact 